
if (${VERBOSE} MATCHES "quiet")
    set(CMAKE_VERBOSE_MAKEFILE off)
else()
    set(CMAKE_VERBOSE_MAKEFILE on)
endif()

set(CMAKE_C_COMPILER "gcc")
set(CMAKE_C_FLAGS "-O2 -g -Wall -Werror -Wextra -finline-functions -Wno-unused-parameter -Wno-unused-result -Wno-override-init -Wformat-y2k -Wformat-security -Bsymbolic -fno-omit-frame-pointer -DUSE_JEMALLOC")
if (${TYPES} MATCHES "debug")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDEBUG")
elseif (${TYPES} MATCHES "gprof")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pg -static-libgcc")
endif()

if (APPLE)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DMACOS")
elseif (CYGWIN)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DCYGWIN")
elseif (UNIX)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DLINUX")
elseif (WIN32)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DWINDOWS")
endif()

set(CMAKE_EXE_LINKER_FLAGS "-rdynamic")

# for bin file export
set(PROJECT_BIN_DIR ${PROJECT_SOURCE_DIR})

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BIN_DIR})
add_custom_command(OUTPUT ${PROJECT_BIN_DIR}
	COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BIN_DIR}
	VERBATIM
)
include_directories(${PROJECT_SOURCE_DIR})
