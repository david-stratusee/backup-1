

"-----------------------------------------------------------------------------------
" for windows
"-----------------------------------------------------------------------------------
set nocompatible
source $VIMRUNTIME/vimrc_example.vim
if has("win32")
    source $VIMRUNTIME/mswin.vim
    "设置鼠标运行模式为WINDOWS模式
    behave mswin
endif

if has("win32")
    set diffexpr=MyDiff()
endif
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

"-----------------------------------------------------------------------------------
" for vundle
"-----------------------------------------------------------------------------------
filetype off                   " required!

if has("win32")
    set rtp+=$VIM/vimfiles/bundle/vundle/
    call vundle#rc('$VIM/vimfiles/bundle/')
else
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
endif

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here:
"
" Syntax
Bundle 'html5.vim'
Bundle 'JavaScript-syntax'
Bundle 'python.vim--Vasiliev'
Bundle 'othree/xml.vim'
Bundle 'yaml.vim'

" Color
Bundle 'desert256.vim'
Bundle 'Impact'
Bundle 'matrix.vim'
Bundle 'vibrantink'
Bundle 'vividchalk.vim'
Bundle 'Solarized'
Bundle '29decibel/codeschool-vim-theme'
Bundle 'tomasr/molokai'

" Indent
Bundle 'IndentAnything'
Bundle 'Javascript-Indentation'
Bundle 'mako.vim--Torborg'
Bundle 'gg/python.vim'
Bundle 'file-line'

" Plugin
Bundle 'The-NERD-tree'
Bundle 'The-NERD-Commenter'
Bundle 'restart.vim'
Bundle 'taglist.vim'
Bundle 'c.vim'
Bundle 'a.vim'
Bundle 'grep.vim'
Bundle 'TagHighlight'
Bundle 'CCTree'
Bundle 'Colour-Sampler-Pack'
Bundle 'bufexplorer.zip'
Bundle 'Trinity'
Bundle 'SrcExpl'
Bundle 'bash-support.vim'
Bundle 'genutils'
Bundle 'EasyGrep'
Bundle 'lookupfile'
Bundle 'calendar.vim'
Bundle 'Tagbar'
Bundle 'DirDiff.vim'
Bundle 'gtags.vim'
Bundle 'CharTab'
Bundle 'OmniCppComplete'
Bundle 'CRefVim'
Bundle 'echofunc.vim'
Bundle 'cscope.vim'
Bundle 'pythoncomplete'
Bundle 'DoxygenToolkit.vim'
Bundle 'godlygeek/tabular'
Bundle 'spiiph/vim-space'
Bundle 'bling/vim-airline'
"Bundle 'NERD_tree-Project'
Bundle 'AutoComplPop'
Bundle 'Mark'
Bundle 'Markdown'
Bundle 'vim-pandoc'
Bundle 'Shougo/neocomplcache.vim'

" javascript
Bundle 'pangloss/vim-javascript'
Bundle 'jimmyhchan/dustjs.vim'
Bundle 'juvenn/mustache.vim'
Bundle 'kchmck/vim-coffee-script'

filetype plugin indent on     " required!

"-----------------------------------------------------------------------------------
" 编码
"-----------------------------------------------------------------------------------
" Multi-encoding setting, MUST BE IN THE BEGINNING OF .vimrc!
"
if has("multi_byte")
    " When 'fileencodings' starts with 'ucs-bom', don't do this manually
    "set bomb
    set fileencodings=ucs-bom,utf-8,chinese,taiwan,japan,korea,latin1
    " CJK environment detection and corresponding setting
    if v:lang =~ "^zh_CN"
        " Simplified Chinese, on Unix euc-cn, on MS-Windows cp936
        set encoding=chinese
        set termencoding=chinese
        if &fileencoding == ''
            set fileencoding=chinese
        endif
    elseif v:lang =~ "^zh_TW"
        " Traditional Chinese, on Unix euc-tw, on MS-Windows cp950
        set encoding=taiwan
        set termencoding=taiwan
        if &fileencoding == ''
            set fileencoding=taiwan
        endif
    elseif v:lang =~ "^ja_JP"
        " Japanese, on Unix euc-jp, on MS-Windows cp932
        set encoding=japan
        set termencoding=japan
        if &fileencoding == ''
            set fileencoding=japan
        endif
    elseif v:lang =~ "^ko"
        " Korean on Unix euc-kr, on MS-Windows cp949
        set encoding=korea
        set termencoding=korea
        if &fileencoding == ''
            set fileencoding=korea
        endif
    endif
    " Detect UTF-8 locale, and override CJK setting if needed
    if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
        set encoding=utf-8
        set fileencoding=utf-8
        set termencoding=utf-8
    endif
else
    echoerr 'Sorry, this version of (g)Vim was not compiled with "multi_byte"'
endif

"解决显示乱码
"set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
"set encoding=chinese
"set fileencoding=chinese
"set termencoding=chinese
"set imcmdline
"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"-----------------------------------------------------------------------------------
" 格式和显示
"-----------------------------------------------------------------------------------
"自动检测文件类型并加载相应的设置，snipMate插件需要打开这个配置选项
filetype plugin indent on

"语法高亮
syntax on
"自动缩进
set autoindent
"设置 Backspace 和 Delete 的灵活程度，backspace=2 则没有任何限制
"设置在哪些模式下使用鼠标功能，mouse=a 表示所有模式
set mouse=a
set backspace=2
"自动换行
set wrap
"智能对齐方式
set smartindent
"一个tab是4个字符
set tabstop=4
"按一次tab前进4个字符
set softtabstop=4
"用空格代替tab
"set expandtab
"设置自动缩进
set ai!
"缩进的字符个数
set cindent shiftwidth=4

"设置折叠模式
"set foldcolumn=4
"光标遇到折叠，折叠就打开
"set foldopen=all
"移开折叠时自动关闭折叠
"set foldclose=all
"zf zo zc zd zr zm zR zM zn zi zN
"依缩进折叠
"   manual  手工定义折叠
"   indent  更多的缩进表示更高级别的折叠
"   expr    用表达式来定义折叠
"   syntax  用语法高亮来定义折叠
"   diff    对没有更改的文本进行折叠
"   marker  对文中的标志折叠
"set foldmethod=syntax
"启动时不要自动折叠代码
"set foldlevel=100
"依标记折叠
"set foldmethod=marker

"显示行号
set number

if has("win32")
    "列高亮，与函数列表有冲突
    set cursorcolumn
endif

"打开光标的行列位置显示功能
set ruler

"显示中文引号
set ambiwidth=double

"行高亮
set cursorline

set incsearch
"高亮搜索的关键字
set hlsearch

"搜索忽略大小写
set ignorecase

"如果搜索模式包含大写字符，不使用 'ignorecase' 选项，只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用
set smartcase

"设置命令历史行数
set history=100

"去掉欢迎界面
set shortmess=atI

" 在C注释中高亮字符串
let c_comment_strings=1

"不要闪烁
"set novisualbell

set path+=include

"-----------------------------------------------------------------------------------
" 设置VIM状态栏
"-----------------------------------------------------------------------------------
set laststatus=2 "显示状态栏(默认值为1, 无法显示状态栏)
if has("win32")
else
set t_Co=256 " Explicitly tell Vim that the terminal supports 256 colors
endif
let g:airline_theme='bubblegum'

"-----------------------------------------------------------------------------------
" 常规设置
"-----------------------------------------------------------------------------------
""============================菜单和自动完成===========================================================================
"增强模式中的命令行自动完成操作
set wildmenu
set completeopt=longest,menu    " 关掉智能补全时的预览窗口
set wildignore=*.bak,*.o,*.e,*~
filetype indent on
filetype plugin indent on       " 加了这句才可以用智能补全

"离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

"回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"

"上下左右键的行为
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

if has("autocmd")
    autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
    autocmd InsertLeave * if pumvisible() == 0|pclose|endif
endif " has("autocmd")

au BufNewFile,BufRead *.py,*.pyw setf python
filetype plugin on
set ofu=syntaxcomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType python runtime! autoload/pythoncomplete.vim

"缺省不产生备份文件
set nobackup

"保存文件前建立备份，保存成功后删除该备份
set writebackup

"关闭提示音
set vb t_vb=

" 不在单词中间断行
set lbr
" 打开断行模块对亚洲语言支持
set fo+=mB
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-

" 在C注释中高亮字符串
let c_comment_strings=1

"关闭插入时跳来跳去的括号匹配
set nosm

"在输入括号时光标会短暂地跳到与之相匹配的括号处，不影响输入
set showmatch
"正确地处理中文字符的折行和拼接
set formatoptions+=mM

"设定文件浏览器目录为当前目录
set bsdir=buffer
"自动切换当前目录为当前文件所在的目录
"set autochdir
"自动重新加载外部修改内容
set autoread
set autowrite

"允许在有未保存的修改时切换缓冲区
set hidden

set visualbell            " visual bell instead of beeping

"选中一段文字并全文搜索这段文字
vmap <silent> ,/ y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>
vmap <silent> ,? y?<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>

"进入当前编辑的文件的目录
"autocmd BufEnter * exec "cd %:p:h"

"保存文件的格式顺序
set fileformats=unix,dos

"启动后最大化
if has("win32")
    au GUIEnter * simalt ~x
endif

"设置帮助信息
set helplang=cn

"Use the dictionary completion
set complete-=k complete+=k

"-----------------------------------------------------------------------------------
" 颜色和字体
"-----------------------------------------------------------------------------------
"配色（更多的配色见colors目录和http://www.cs.cmu.edu/~maverick/VimColorSchemeTest/index-c.html）
"colorscheme desertEx

"设置字体
if has("gui")
    if has("win32")
		set guifont=terminus:h12
    else
		set guifont=terminus\ 12
    endif
else
	set guifont=terminus:h12
endif

"-----------------------------------------------------------------------------------
" 保存会话信息
"-----------------------------------------------------------------------------------
"自动保存session和viminfo
"缺省的sessionoptions选项包括：blank,buffers,curdir,folds,help,options,tabpages,winsize
"也就是会话文件会恢复当前编辑环境的空窗口、所有的缓冲区、当前目录、折叠(fold)相关的信息、帮助窗口、所有的选项和映射、所有的标签页(tab)、窗口大小
"set sessionoptions-=curdir
"au VimLeave * mksession! $VIMRUNTIME/Session.vim
"au VimLeave * wviminfo! $VIMRUNTIME/_viminfo
"source $VIMRUNTIME/Session.vim
"rviminfo $VIMRUNTIME/_viminfo

"记录上次关闭的文件及状态
"set viminfo='10,\"100,:20,%,n$VIMRUNTIME/_viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"-----------------------------------------------------------------------------------
" plugin设置
"-----------------------------------------------------------------------------------
""""""""""""""""""""""""""""""
" 设置lookupfile插件
""""""""""""""""""""""""""""""
let g:LookupFile_MinPatLength           = 3 " 最少输入3个字符才开始查找
let g:LookupFile_PreserveLastPattern    = 0 " 不保存上次查找的字符串
let g:LookupFile_PreservePatternHistory = 1 " 保存查找历史
let g:LookupFile_AlwaysAcceptFirst      = 1 " 回车打开第一个匹配项目
let g:LookupFile_AllowNewFiles          = 0 " 不允许创建不存在的文件
let g:LookupFile_UpdateTime				= 600
let g:LookupFile_TagExpr				= '"filenametags"'
" lookup file with ignore case
function! LookupFile_IgnoreCaseFunc(pattern)
	let _tags = &tags
	try
		let &tags = eval(g:LookupFile_TagExpr)
		let newpattern = '\c' . a:pattern
		let tags = taglist(newpattern)
	catch
		echohl ErrorMsg | echo "Exception: " . v:exception | echohl NONE
		return ""
	finally
		let &tags = _tags
	endtry

	" Show the matches for what is typed so far.
	let files = map(tags, 'v:val["filename"]')
	return files
endfunction
function! LookupFile_IgnoreCaseFuncGnuGlobal(pattern)
	" Show the matches for what is typed so far.
	let files = split(system("global -i -P ".a:pattern))
	return files
endfunction
if &csprg == "gtags-cscope"
	let g:LookupFile_LookupFunc = 'LookupFile_IgnoreCaseFuncGnuGlobal'
else
	let g:LookupFile_LookupFunc = 'LookupFile_IgnoreCaseFunc'
endif

"映射LookupFile为,lf
nmap <silent> ,lf <Plug>LookupFile<CR>
"映射LUBufs为,lb
nmap <silent> ,lb :LUBufs<CR>
"映射LUWalk为,lw
nmap <silent> ,lw :LUWalk<CR>
"映射LUPath为,lp
nmap <silent> ,lp :LUPath<CR>

nmap <silent> <C-F10> :tabe<CR>:LUWalk<CR>
nmap <silent> <C-F11> :tabe<CR><plug>LookupFile<CR>

""""""""""""""""""""""""""""""
" 设置DoxygenToolkit插件
""""""""""""""""""""""""""""""
map fg :Dox<cr>
let g:DoxygenToolkit_briefTag_pre      = "@Brief:  "
let g:DoxygenToolkit_paramTag_pre      = "@Param: "
let g:DoxygenToolkit_returnTag         = "@Returns:   "
let g:DoxygenToolkit_blockHeader       = "--------------------------------------------------------------------------"
let g:DoxygenToolkit_blockFooter       = "--------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName        = "dengwei"
let g:DoxygenToolkit_BriefTag_funcName = "yes"
let g:doxygen_enhanced_color           = 1

"------------------------ nerd_tree ----------------------------
let g:NERDChristmasTree = 1              "色彩显示
let g:NERDTreeShowHidden = 1             "显示隐藏文件
let g:NERDTreeWinPos = 'left'            "窗口显示位置
let g:NERDTreeHighlightCursorline = 0    "高亮当前行

"------------------------ autocomplpop ----------------------------
if has("win32")
    let g:acp_completeoptPreview=1
endif

"-- omnicppcomplete setting --
set completeopt=menu,menuone
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype  in popup window
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_DisplayMode=1
let OmniCpp_DefaultNamespaces=["std"]

"------------------------ DirDiff ----------------------------
let g:DirDiffExcludes = "cscope.*,CVS,*.class,*.exe,.*.swp,*.a,*.lib,*.doc,*.bak,*.bin,*.lwp,*.EXE,*.pdb,*.bsc,*.ilk,*.ncb,*.dep,*.obj,*.dll,*.rar,*.zip,*.gz,*.bz2,*.sim,*.elf,*~,*.o,*.map,*.rej,*.orig"
let g:DirDiffIgnore = "Id:,Revision:,Date:"

let g:DirDiffDynamicDiffText = 0
if g:DirDiffDynamicDiffText == 0 && match($LANG, "zh_CN") == 0
	" String used for the English equivalent "Files "
	let g:DirDiffTextFiles = "文件 "
	" String used for the English equivalent " and "
	let g:DirDiffTextAnd = " 和 "
	" String used for the English equivalent " differ")
	let g:DirDiffTextDiffer = " 不同"
	" String used for the English equivalent "Only in ")
	let g:DirDiffTextOnlyIn = "只在 "
	" String used for the English equivalent ": ")
	let g:DirDiffTextOnlyInCenter = " 存在："
endif

"------------------------ neocomplcache ----------------------------
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Enable heavy features.
" Use camel case completion.
"let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
"let g:neocomplcache_enable_underbar_completion = 1

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
	\ 'default' : '',
	\ 'vimshell' : $HOME.'/.vimshell_hist',
	\ 'scheme' : $HOME.'/.gosh_completions'
		\ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
	let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplcache_enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplcache_enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php =
\ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
let g:neocomplcache_omni_patterns.c =
\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
let g:neocomplcache_omni_patterns.cpp =
\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplcache_omni_patterns.perl =
\ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

"------------------------ pandoc ----------------------------
let g:pandoc_no_folding=1

"-----------------------------------------------------------------------------------
" 快捷键
"-----------------------------------------------------------------------------------
"Alt + -> 打开下一个文件
map <M-right> <ESC>:bn<RETURN>
"Alt + <- 打开上一个文件
map <M-left> <ESC>:bp<RETURN>

"-----------------------------------------------------------------------------------
" 小工具
"-----------------------------------------------------------------------------------
"使用TAB键自动完成
"This function determines, wether we are on
"the start of the line text(then tab indents)
"or if we want to try auto completion
function! InsertTabWrapper()
    let col=col('.')-1
    if !col || getline('.')[col-1] !~ '\k'
        return "\<TAB>"
    else
        return "\<C-N>"
    endif
endfunction
"使用SuperTab之后，就可以关闭该设置了
inoremap <TAB> <C-R>=InsertTabWrapper()<CR>

"平台判断
function! GetSystem()
    if (has("win32") || has("win95") || has("win64") || has("win16"))
        return "windows"
    elseif has("unix")
        return "linux"
    elseif has("mac")
        return "mac"
    endif
endfunction

"取得光标处的匹配
function! GetPatternAtCursor(pat)
    let col = col('.') - 1
    let line = getline('.')
    let ebeg = -1
    let cont = match(line, a:pat, 0)
    while (ebeg >= 0 || (0 <= cont) && (cont <= col))
        let contn = matchend(line, a:pat, cont)
        if (cont <= col) && (col < contn)
            let ebeg = match(line, a:pat, cont)
            let elen = contn - ebeg
            break
        else
            let cont = match(line, a:pat, contn)
        endif
    endwh
    if ebeg >= 0
        return strpart(line, ebeg, elen)
    else
        return ""
    endif
endfunction

"打开链接
function! OpenUrl()
    let s:url = GetPatternAtCursor('\v(https?://|ftp://|file:/{3}|www\.)((\w|-)+\.)+(\w|-)+(:\d+)?(/(\w|[~@#$%^&+=/.?-])+)?')
    "echo s:url
    if s:url == ""
        echohl WarningMsg
        echomsg '在光标处未发现URL！'
        echohl None
    else
        if GetSystem() == "windows"
            call system("explorer " . s:url)
        else
            call system("firefox " . s:url . " &")
        endif
    endif
    unlet s:url
endfunction
nmap <C-LeftMouse> :call OpenUrl()<CR>

"放大字体
function <SID>FontSize_Enlarge()
    if GetSystem() == "linux"
        let pattern = '\<\d\+$'
    elseif GetSystem() == "windows"
        let pattern = ':h\zs\d\+\ze:'
    endif
    let fontsize = matchstr(&gfn, pattern)
    let cmd      = substitute(&gfn, pattern, string(fontsize + 1), 'g')
    let &gfn     = cmd
    let fontsize = matchstr(&gfw, pattern)
    let cmd      = substitute(&gfw, pattern, string(fontsize + 1), 'g')
    let &gfw     = cmd
endfunction
nnoremap <A-+> :call <SID>FontSize_Enlarge()<CR>

"缩小字体
function <SID>FontSize_Reduce()
    if GetSystem() == "linux"
        let pattern = '\<\d\+$'
    elseif GetSystem() == "windows"
        let pattern = ':h\zs\d\+\ze:'
    endif
    let fontsize = matchstr(&gfn, pattern)
    let cmd      = substitute(&gfn, pattern, string(fontsize - 1), 'g')
    let &gfn     = cmd
    let fontsize = matchstr(&gfw, pattern)
    let cmd      = substitute(&gfw, pattern, string(fontsize - 1), 'g')
    let &gfw     = cmd
endfunction
nnoremap <A--> :call <SID>FontSize_Reduce()<CR>

"能够漂亮的显示.NFO文件
function! SetFileEncodings(encodings)
    let b:myfileencodingsbak=&fileencodings
    let &fileencodings=a:encodings
endfunction
function! RestoreFileEncodings()
    let &fileencodings=b:myfileencodingsbak
    unlet b:myfileencodingsbak
endfunction
au BufReadPre *.nfo call SetFileEncodings('cp437')|set ambiwidth=single
au BufReadPost *.nfo call RestoreFileEncodings()

"F2处理行尾的空格以及文件尾部的多余空行
"Automatically remove trailing spaces when saving a file.
autocmd BufRead,BufWrite *.c if ! &bin | silent! %s/\s\+$//ge | endif
autocmd BufRead,BufWrite *.cpp if ! &bin | silent! %s/\s\+$//ge | endif
"Remove indenting on empty line
map <F4> :w<CR>:call CleanupBuffer(1)<CR>:noh<CR>
function! CleanupBuffer(keep)
    " Skip binary files
    if (&bin > 0)
        return
    endif
    " Remove spaces and tabs from end of every line, if possible
    silent! %s/\s\+$//ge
    " Save current line number
    let lnum = line(".")
    " number of last line
    let lastline = line("$")
    let n        = lastline
    " while loop
    while (1)
        " content of last line
        let line = getline(n)
        " remove spaces and tab
        if (!empty(line))
            break
        endif
        let n = n - 1
    endwhile
    " Delete all empty lines at the end of file
    let start = n+1+a:keep
    if (start < lastline)
        execute n+1+a:keep . "," . lastline . "d"
    endif
    " after clean spaces and tabs, jump back
    exec "normal " . lnum . "G"
endfunction

"快速查找（插件grep插件，需要grep软件）
nnoremap <silent> <F7> :Rgrep<CR>

"使用IE预览网页
function! BrowseWebPage()
    let filepath = substitute(getcwd()."\\".bufname("%"), 'E:\\Web\\htdocs\\', "http://localhost/", "g")
    let filepath = substitute(filepath,"\\","\/","g")
    silent execute "!\"explorer\""." ".filepath
endfunction
if has("Win32")
    map <S-F4> :call BrowseWebPage()<CR>
endif

"F11查看打开的文件列表（bufexplorer插件）
let g:bufExplorerDefaultHelp = 1
let g:bufExplorerDetailedHelp = 0
nmap <C-F5> :BufExplorer <CR>

"F12生成/更新tags文件
function! UpdateTagsFile()
    silent !ctags -R --fields=+ianS --extra=+q
endfunction
"nmap <F12> :call UpdateTagsFile()<CR>

"Ctrl + F12删除tags文件
function! DeleteTagsFile()
    "Linux下的删除方法
    "silent !rm tags
    "Windows下的删除方法
    silent !del /F /Q tags
endfunction
"nmap <S-F12> :call DeleteTagsFile()<CR>

if has("Win32")
else
    nmap <F2> :!make_cscope.sh<CR>
    nmap <F3> :!vbuild.sh -q<CR>
endif
nmap <F5> :copen<CR>
nmap <F6> :cclose<CR>
nmap <F7> :TrinityToggleTagList<CR>

" Open and close all the three plugins on the same time
nmap <F9>  :TrinityToggleAll<CR>

" Open and close the Taglist separately
nmap <F10> :TagbarToggle<CR>

" Open and close the NERD Tree separately
nmap <F11> :TrinityToggleNERDTree<CR>

" Open and close the Source Explorer separately
nmap <F12> :TrinityToggleSourceExplorer<CR>

" Tabularize
let mapleader='\'
if exists(":Tabularize")
  nmap <Leader>t= :Tabularize /=<CR>
  vmap <Leader>t= :Tabularize /=<CR>
  nmap <Leader>t: :Tabularize /:\zs<CR>
  vmap <Leader>t: :Tabularize /:\zs<CR>
endif
"inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column   = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" 常规模式下输入 cS 清除行尾空格
nmap cS :%s/\s\+$//g<cr>:noh<cr>

" 常规模式下输入 cM 清除行尾 ^M 符号
nmap cM :%s/\r$//g<cr>:noh<cr>

"==============================额外函数功能=========================================================================
"------------------------ vim -b: 打开二进制文件 ----------------------------
" vim -b : edit binary using xxd-format!
if !exists("g:bin_file_exts")
	let g:bin_file_exts = [".bin", ".exe", ".EXE", ".dll", ".DLL"]
endif
function BinMode()
	if !exists("b:force_bin_mode")
		let b:force_bin_mode = 0
	endif
	if !exists("b:force_txt_mode ")
		let b:force_txt_mode = 0
	endif
	if &bin && ( (b:auto_bin_mode&&!b:force_txt_mode) || b:force_bin_mode)
		return 1
	else
		return 0
	endif
endfunction
function BinToHex()
	if BinMode()
		silent %!xxd
		set ft=xxd
	endif
endfunction
function HexToBin()
	if BinMode()
		%!xxd -r
	endif
endfunction
function BinWritePost()
	if BinMode()
		silent %!xxd
		set nomod
	endif
endfunction
function DetectBin(file_name)
	for ext in g:bin_file_exts
		if match(a:file_name, ext."$") > 0
			let &bin = 1
			let b:auto_bin_mode = 1
			return
		endif
	endfor
	let b:auto_bin_mode = 0
endfunction
augroup Binary
	au!
	au BufReadPre  * call DetectBin(expand("<amatch>"))
	au BufReadPost * call BinToHex()
	au BufWritePre * call HexToBin()
	au BufWritePost * call BinWritePost()
augroup END
command HexMode let &bin = 1 | let b:force_bin_mode = 1 | let b:force_txt_mode = 0 | e
command TxtMode let &bin = 0 | let b:force_bin_mode = 0 | let b:force_txt_mode = 1 | e

"------------------------ for nfo: 能够漂亮的显示.NFO文件 ----------------------------
function! SetFileEncodings(encodings)
    let b:myfileencodingsbak=&fileencodings
    let &fileencodings=a:encodings
endfunction
function! RestoreFileEncodings()
    let &fileencodings=b:myfileencodingsbak
    unlet b:myfileencodingsbak
endfunction
au BufReadPre *.nfo call SetFileEncodings('cp437')|set ambiwidth=single
au BufReadPost *.nfo call RestoreFileEncodings()

nnoremap <F8> "=strftime("%F %H:%M")<CR>gP
inoremap <F8> <C-R>=strftime("%F %H:%M")<CR>

